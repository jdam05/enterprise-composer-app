{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport { debounceTime } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../composer.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/forms\";\nfunction ComposerListComponent_tbody_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tbody\")(1, \"tr\")(2, \"td\", 8)(3, \"a\", 9);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const composer_r1 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate1(\"routerLink\", \"/composer-details/\", composer_r1.composerId, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(composer_r1.composerId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(composer_r1.fullName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(composer_r1.genre);\n  }\n}\n// component to display composer list\nexport class ComposerListComponent {\n  constructor(composerService) {\n    this.composerService = composerService;\n    this.txtSearchControl = new FormControl('');\n    // Initializing composers property as an array containing elements of the Composer class\n    this.composers = this.composerService.getComposers();\n    // Debounce function slowing down the number of times the filterComposer is called\n    this.txtSearchControl.valueChanges.pipe(debounceTime(500)).subscribe(val => this.filterComposers(val || ''));\n  }\n  //OnInit method to be called after composer-list component is initialized\n  ngOnInit() {}\n  filterComposers(name) {\n    this.composers = this.composerService.filterComposers(name);\n  }\n}\nComposerListComponent.ɵfac = function ComposerListComponent_Factory(t) {\n  return new (t || ComposerListComponent)(i0.ɵɵdirectiveInject(i1.ComposerService));\n};\nComposerListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ComposerListComponent,\n  selectors: [[\"app-composer-list\"]],\n  decls: 15,\n  vars: 4,\n  consts: [[1, \"row\"], [1, \"col-sm-12\"], [1, \"txtSearch\"], [\"type\", \"text\", \"id\", \"txtSearch\", \"placeholder\", \"Search by name\", 1, \"form-control\", 3, \"formControl\"], [1, \"table\", \"table-bordered\"], [1, \"thead-dark\"], [\"scope\", \"col\"], [4, \"ngFor\", \"ngForOf\"], [\"scope\", \"row\"], [3, \"routerLink\"]],\n  template: function ComposerListComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵelement(3, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"table\", 4)(5, \"thead\", 5)(6, \"tr\")(7, \"th\", 6);\n      i0.ɵɵtext(8, \"Composer ID\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"th\", 6);\n      i0.ɵɵtext(10, \"Composer's name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"th\", 6);\n      i0.ɵɵtext(12, \"Genre\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtemplate(13, ComposerListComponent_tbody_13_Template, 9, 4, \"tbody\", 7);\n      i0.ɵɵpipe(14, \"async\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formControl\", ctx.txtSearchControl);\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(14, 2, ctx.composers));\n    }\n  },\n  dependencies: [i2.NgForOf, i3.RouterLink, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlDirective, i2.AsyncPipe],\n  styles: [\".txtSearch[_ngcontent-%COMP%] {\\n  width: 30%;\\n  float: right;\\n  margin-bottom: 5px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9zZXItbGlzdC9jb21wb3Nlci1saXN0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0VBUUU7O0FBRUYsdUJBQXVCO0FBQ3ZCO0VBQ0UsVUFBVTtFQUNWLFlBQVk7RUFDWixrQkFBa0I7QUFDcEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogVGl0bGU6IGNvbXBvc2VyLWxpc3QuY29tcG9uZW50LmNzc1xuICogRGF0ZTogSmFudWFyeSAyNCwgMjAyM1xuICogQXV0aG9yOiBKYW1hbCBFZGRpbmUgRGFtaXJcbiAqIERlc2NyaXB0aW9uOiBDb21wb3NlciBsaXN0IGNvbXBvbmVudCBDU1MgZmlsZVxuICogU291cmNlczpcbiAqIFNvdXJjZSBjb2RlIGZyb20gY2xhc3MgR2l0SHViIFJlcG9zaXRvcnlcbiAqIEluc3RydWN0b3IgcHJvdmlkZWQgYXNzaWdubWVudCBzcGVjaWZpYyBpbnN0cnVjdGlvbnNcbiAqL1xuXG4vKiBTdHlsaW5nIGlucHV0IGZpZWxkKi9cbi50eHRTZWFyY2gge1xuICB3aWR0aDogMzAlO1xuICBmbG9hdDogcmlnaHQ7XG4gIG1hcmdpbi1ib3R0b206IDVweDtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"AAcA,SAASA,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,YAAY,QAAQ,MAAM;;;;;;;;ICiB7BC,6BAAkD;IAIgBA,YAE1D;IAAAA,iBAAI;IAERA,0BAAI;IAAAA,YAAuB;IAAAA,iBAAK;IAChCA,0BAAI;IAAAA,YAAoB;IAAAA,iBAAK;;;;IALxBA,eAAwD;IAAxDA,yFAAwD;IAACA,eAE1D;IAF0DA,4CAE1D;IAEAA,eAAuB;IAAvBA,0CAAuB;IACvBA,eAAoB;IAApBA,uCAAoB;;;ADvBlC;AAMA,OAAM,MAAOC,qBAAqB;EAIhCC,YAAoBC,eAAgC;IAAhC,oBAAe,GAAfA,eAAe;IAFnC,qBAAgB,GAAG,IAAIL,WAAW,CAAC,EAAE,CAAC;IAGpC;IACA,IAAI,CAACM,SAAS,GAAG,IAAI,CAACD,eAAe,CAACE,YAAY,EAAE;IAEpD;IACA,IAAI,CAACC,gBAAgB,CAACC,YAAY,CAC/BC,IAAI,CAACT,YAAY,CAAC,GAAG,CAAC,CAAC,CACvBU,SAAS,CAAEC,GAAG,IAAK,IAAI,CAACC,eAAe,CAACD,GAAG,IAAI,EAAE,CAAC,CAAC;EACxD;EAEA;EACAE,QAAQ,IAAU;EAElBD,eAAe,CAACE,IAAY;IAC1B,IAAI,CAACT,SAAS,GAAG,IAAI,CAACD,eAAe,CAACQ,eAAe,CAACE,IAAI,CAAC;EAC7D;;AAnBWZ,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;QAArBA,qBAAqB;EAAAa;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCdlClB,8BAAiB;MAIXA,2BAME;MACJA,iBAAM;MAENA,gCAAoC;MAGdA,2BAAW;MAAAA,iBAAK;MAChCA,6BAAgB;MAAAA,gCAAe;MAAAA,iBAAK;MACpCA,8BAAgB;MAAAA,sBAAK;MAAAA,iBAAK;MAI9BA,4EAWQ;;MACVA,iBAAQ;;;MA1BJA,eAAgC;MAAhCA,kDAAgC;MAcNA,gBAAoB;MAApBA,8DAAoB","names":["FormControl","debounceTime","i0","ComposerListComponent","constructor","composerService","composers","getComposers","txtSearchControl","valueChanges","pipe","subscribe","val","filterComposers","ngOnInit","name","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/jamaldamir/Documents/School/spring2023/class-web-425/enterprise-composer-app/src/app/composer-list/composer-list.component.ts","/Users/jamaldamir/Documents/School/spring2023/class-web-425/enterprise-composer-app/src/app/composer-list/composer-list.component.html"],"sourcesContent":["/**\n * Title: composer-list.component.ts\n * Date: January 12, 2023\n * Author: Jamal Eddine Damir\n * Description: Composer list component\n * Sources:\n * Source code from class GitHub Repository\n * Instructor provided assignment specific instructions\n */\n\n// Importing the required modules\nimport { Component, OnInit } from '@angular/core';\nimport { ComposerService } from '../composer.service';\nimport { IComposer } from '../composer.interface';\nimport { FormControl } from '@angular/forms';\nimport { debounceTime } from 'rxjs';\nimport { Observable } from 'rxjs';\n\n// component to display composer list\n@Component({\n  selector: 'app-composer-list',\n  templateUrl: './composer-list.component.html',\n  styleUrls: ['./composer-list.component.css'],\n})\nexport class ComposerListComponent implements OnInit {\n  composers: Observable<IComposer[]>;\n  txtSearchControl = new FormControl('');\n\n  constructor(private composerService: ComposerService) {\n    // Initializing composers property as an array containing elements of the Composer class\n    this.composers = this.composerService.getComposers();\n\n    // Debounce function slowing down the number of times the filterComposer is called\n    this.txtSearchControl.valueChanges\n      .pipe(debounceTime(500))\n      .subscribe((val) => this.filterComposers(val || ''));\n  }\n\n  //OnInit method to be called after composer-list component is initialized\n  ngOnInit(): void {}\n\n  filterComposers(name: string) {\n    this.composers = this.composerService.filterComposers(name);\n  }\n}\n","<!--\n * Title: composer-list.component.html\n * Date: January 12, 2023\n * Author: Jamal Eddine Damir\n * Description: Composer list component\n * Sources:\n * Source code from class GitHub Repository\n * Instructor provided assignment specific instructions\n -->\n\n<div class=\"row\">\n  <div class=\"col-sm-12\">\n    <!-- Div containing input field with form control-->\n    <div class=\"txtSearch\">\n      <input\n        type=\"text\"\n        id=\"txtSearch\"\n        class=\"form-control\"\n        [formControl]=\"txtSearchControl\"\n        placeholder=\"Search by name\"\n      />\n    </div>\n    <!-- Tables displaying list of composers-->\n    <table class=\"table table-bordered\">\n      <thead class=\"thead-dark\">\n        <tr>\n          <th scope=\"col\">Composer ID</th>\n          <th scope=\"col\">Composer's name</th>\n          <th scope=\"col\">Genre</th>\n        </tr>\n      </thead>\n      <!-- Iterate over composers array with async pipe-->\n      <tbody *ngFor=\"let composer of composers | async\">\n        <tr>\n          <td scope=\"row\">\n            <!-- Passing composerId from composer-details-->\n            <a routerLink=\"/composer-details/{{ composer.composerId }}\">{{\n              composer.composerId\n            }}</a>\n          </td>\n          <td>{{ composer.fullName }}</td>\n          <td>{{ composer.genre }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}