{"ast":null,"code":"import { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class ComposerService {\n  // Composer class constructor\n  constructor() {\n    // Initializing property with array of composers objects\n    this.composers = [{\n      composerId: 103,\n      fullName: 'Ludovico Einaudi',\n      genre: 'Classical'\n    }, {\n      composerId: 104,\n      fullName: 'John Williams',\n      genre: 'Classical'\n    }, {\n      composerId: 105,\n      fullName: 'Franz Schubert',\n      genre: 'Classical'\n    }, {\n      composerId: 106,\n      fullName: 'Frédéric Chopin',\n      genre: 'Classical'\n    }, {\n      composerId: 107,\n      fullName: 'Wolfgang Amadeus Mozart',\n      genre: 'Classical'\n    }];\n  }\n  // Method returning an array of composers\n  getComposers() {\n    return of(this.composers);\n  }\n  // Method returning specific composer\n  getComposer(composerId) {\n    // Iterate over the composers array and return composer data if there is a match of composerId\n    for (let composer of this.composers) {\n      if (composer.composerId === composerId) {\n        return composer;\n      }\n    }\n    // Return IComposer object if no match is found\n    return {};\n  }\n  // Filter composers by entered name\n  filterComposers(name) {\n    return of(this.composers).pipe(map(composers => composers.filter(composer => composer.fullName.toLowerCase().indexOf(name) > -1)));\n  }\n}\nComposerService.ɵfac = function ComposerService_Factory(t) {\n  return new (t || ComposerService)();\n};\nComposerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ComposerService,\n  factory: ComposerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAaA,SAASA,EAAE,QAAQ,MAAM;AACzB,SAASC,GAAG,QAAQ,gBAAgB;;AAKpC,OAAM,MAAOC,eAAe;EAG1B;EACAC;IACE;IACA,IAAI,CAACC,SAAS,GAAG,CACf;MAAEC,UAAU,EAAE,GAAG;MAAEC,QAAQ,EAAE,kBAAkB;MAAEC,KAAK,EAAE;IAAW,CAAE,EACrE;MAAEF,UAAU,EAAE,GAAG;MAAEC,QAAQ,EAAE,eAAe;MAAEC,KAAK,EAAE;IAAW,CAAE,EAClE;MAAEF,UAAU,EAAE,GAAG;MAAEC,QAAQ,EAAE,gBAAgB;MAAEC,KAAK,EAAE;IAAW,CAAE,EACnE;MAAEF,UAAU,EAAE,GAAG;MAAEC,QAAQ,EAAE,iBAAiB;MAAEC,KAAK,EAAE;IAAW,CAAE,EACpE;MACEF,UAAU,EAAE,GAAG;MACfC,QAAQ,EAAE,yBAAyB;MACnCC,KAAK,EAAE;KACR,CACF;EACH;EAEA;EACAC,YAAY;IACV,OAAOR,EAAE,CAAC,IAAI,CAACI,SAAS,CAAC;EAC3B;EAEA;EACAK,WAAW,CAACJ,UAAkB;IAC5B;IACA,KAAK,IAAIK,QAAQ,IAAI,IAAI,CAACN,SAAS,EAAE;MACnC,IAAIM,QAAQ,CAACL,UAAU,KAAKA,UAAU,EAAE;QACtC,OAAOK,QAAQ;;;IAGnB;IACA,OAAO,EAAe;EACxB;EAEA;EACAC,eAAe,CAACC,IAAY;IAC1B,OAAOZ,EAAE,CAAC,IAAI,CAACI,SAAS,CAAC,CAACS,IAAI,CAC5BZ,GAAG,CAAEG,SAAS,IACZA,SAAS,CAACU,MAAM,CACbJ,QAAQ,IAAKA,QAAQ,CAACJ,QAAQ,CAACS,WAAW,EAAE,CAACC,OAAO,CAACJ,IAAI,CAAC,GAAG,CAAC,CAAC,CACjE,CACF,CACF;EACH;;AA7CWV,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAe,SAAff,eAAe;EAAAgB,YAFd;AAAM","names":["of","map","ComposerService","constructor","composers","composerId","fullName","genre","getComposers","getComposer","composer","filterComposers","name","pipe","filter","toLowerCase","indexOf","factory","providedIn"],"sourceRoot":"","sources":["/Users/jamaldamir/Documents/School/spring2023/class-web-425/enterprise-composer-app/src/app/composer.service.ts"],"sourcesContent":["/**\n * Title: composer.service.ts\n * Date: January 25, 2023\n * Author: Jamal Eddine Damir\n * Description:\n * Sources: File containing service class\n * Source code from class GitHub Repository\n * Instructor provided assignment specific instructions\n */\n\nimport { Injectable } from '@angular/core';\nimport { IComposer } from './composer.interface';\nimport { Observable } from 'rxjs';\nimport { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ComposerService {\n  composers: Array<IComposer>;\n\n  // Composer class constructor\n  constructor() {\n    // Initializing property with array of composers objects\n    this.composers = [\n      { composerId: 103, fullName: 'Ludovico Einaudi', genre: 'Classical' },\n      { composerId: 104, fullName: 'John Williams', genre: 'Classical' },\n      { composerId: 105, fullName: 'Franz Schubert', genre: 'Classical' },\n      { composerId: 106, fullName: 'Frédéric Chopin', genre: 'Classical' },\n      {\n        composerId: 107,\n        fullName: 'Wolfgang Amadeus Mozart',\n        genre: 'Classical',\n      },\n    ];\n  }\n\n  // Method returning an array of composers\n  getComposers(): Observable<IComposer[]> {\n    return of(this.composers);\n  }\n\n  // Method returning specific composer\n  getComposer(composerId: number) {\n    // Iterate over the composers array and return composer data if there is a match of composerId\n    for (let composer of this.composers) {\n      if (composer.composerId === composerId) {\n        return composer;\n      }\n    }\n    // Return IComposer object if no match is found\n    return {} as IComposer;\n  }\n\n  // Filter composers by entered name\n  filterComposers(name: string): Observable<IComposer[]> {\n    return of(this.composers).pipe(\n      map((composers) =>\n        composers.filter(\n          (composer) => composer.fullName.toLowerCase().indexOf(name) > -1\n        )\n      )\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}